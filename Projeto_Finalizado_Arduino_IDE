#include <WiFi.h>
#include <PubSubClient.h>

const char* ssid = "KITT";
const char* password = "06121315";
const char* mqttServer = "ec2mvr.duckdns.org";
const int mqttPort = 1883;
const char* mqttUser = "markinho";
const char* mqttPassword = "markinho12";
const char* mqttTopicsala = "esp32/sala";
const char* mqttTopiccozinha = "esp32/cozinha";
const char* mqttTopicquarto = "esp32/quarto";
const char* mqttTopicLedsala = "Led/Indicasala";
const char* mqttTopicLedcozinha = "Led/Indicacozinha";
const char* mqttTopicLedquarto = "Led/Indicaquarto";

const int sensorPinsala = 33; // 
const int sensorPincozinha = 34; // 
const int sensorPinquarto = 35; // 
const int ledPinsala = 18; // 
const int ledPincozinha = 19; //
const int ledPinquarto = 21; // 

WiFiClient espClient;
PubSubClient client(espClient);

void setup() {
  Serial.begin(115200);

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println();
  Serial.print("Conectado ao WiFi com endereço IP: ");
  Serial.println(WiFi.localIP());

  pinMode(ledPinsala, OUTPUT);
  pinMode(ledPincozinha, OUTPUT);
  pinMode(ledPinquarto, OUTPUT);


client.setServer(mqttServer, mqttPort);
client.setCallback(callback);

  while (!client.connected()) {
    Serial.println("Conectando ao servidor MQTT...");
    if (client.connect("ESP32Client", mqttUser, mqttPassword)) {
      Serial.println("Conectado ao servidor MQTT!");
      client.subscribe(mqttTopicLedsala);
      client.subscribe(mqttTopicLedcozinha);
      client.subscribe(mqttTopicLedquarto);
    } else {
      Serial.print("Falha na conexão - Estado: ");
      Serial.print(client.state());
      delay(2000);
    }
  }
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Mensagem recebida no topico: ");
  Serial.println(topic);

  // Verifica se a mensagem recebida é para o LED de sala
  if (strcmp(topic, mqttTopicLedsala) == 0) {
    Serial.print("Valor recebido para o LED de sala: ");
    Serial.write(payload, length);
    Serial.println();

    // Converte o payload para uma string
    String value = "";
    for (unsigned int i = 0; i < length; i++) {
      value += (char)payload[i];
    }

    value.toLowerCase(); // Converte para minusculas

    // Liga ou desliga o LED de acordo com o valor recebido
    if (value.equals("true")) { // Comparação com letras minúsculas
      digitalWrite(ledPinsala, HIGH);
    } else {
      digitalWrite(ledPinsala, LOW);
    }
  }

  // Verifica se a mensagem recebida é para o LED de cozinha
  if (strcmp(topic, mqttTopicLedcozinha) == 0) {
    Serial.print("Valor recebido para o LED de cozinha: ");
    Serial.write(payload, length);
    Serial.println();

    // Converte o payload para uma string
    String value = "";
    for (unsigned int i = 0; i < length; i++) {
      value += (char)payload[i];
    }

    value.toLowerCase(); // Converte para minúsculas

    // Liga ou desliga o LED de acordo com o valor recebido
    if (value.equals("true")) { // Comparação com letras minúsculas
      digitalWrite(ledPincozinha, HIGH);
    } else {
      digitalWrite(ledPincozinha, LOW);
    }
  }

  // Verifica se a mensagem recebida é para o LED de nível
  if (strcmp(topic, mqttTopicLedquarto) == 0) {
    Serial.print("Valor recebido para o LED de quarto: ");
    Serial.write(payload, length);
    Serial.println();

    // Converte o payload para uma string
    String value = "";
    for (unsigned int i = 0; i < length; i++) {
      value += (char)payload[i];
    }

    value.toLowerCase(); // Converte para minúsculas

    // Liga ou desliga o LED de acordo com o valor recebido
    if (value.equals("true")) { // Comparação com letras minúsculas
      digitalWrite(ledPinquarto, HIGH);
    } else {
      digitalWrite(ledPinquarto, LOW);
    }
  }
}

void reconnect() {
  while (!client.connected()) {
    Serial.println("Tentando reconectar ao servidor MQTT...");
    if (client.connect("ESP32Client", mqttUser, mqttPassword)) {
      Serial.println("Conectado ao servidor MQTT!");
      client.subscribe(mqttTopicLedsala);
      client.subscribe(mqttTopicLedcozinha);
      client.subscribe(mqttTopicLedquarto);
    } else {
      Serial.print("Falha na conexão - Estado: ");
      Serial.print(client.state());
      delay(2000);
    }
  }
}

  void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
  int sensorValuesala = analogRead(sensorPinsala);
  int sensorValuecozinha = analogRead(sensorPincozinha);
  int sensorValuequarto = analogRead(sensorPinquarto);

  float sala = map(sensorValuesala, 0, 4095, 0, 100);
  float cozinha = map(sensorValuecozinha, 0, 4095, 0, 100);
  float quarto = map(sensorValuequarto,  0, 4095, 0, 100);

  String salaPayload = String(sala);
  String cozinhaPayload = String(cozinha);
  String quartoPayload = String(quarto);

  Serial.print("Enviando dados para o Node-RED - sala: ");
  Serial.println(sala);
  client.publish(mqttTopicsala, salaPayload.c_str());

  Serial.print("Enviando dados para o Node-RED - cozinha: ");
  Serial.println(cozinha);
  client.publish(mqttTopiccozinha, cozinhaPayload.c_str());

  Serial.print("Enviando dados para o Node-RED - quarto: ");
  Serial.println(quarto);
  client.publish(mqttTopicquarto, quartoPayload.c_str());

  delay(1000);
}


